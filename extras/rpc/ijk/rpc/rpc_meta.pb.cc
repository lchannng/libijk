// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#include "rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_Request_rpc_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_Response_rpc_5fmeta_2eproto;
namespace ijk {
class RpcMeta_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RpcMeta_Request> _instance;
} _RpcMeta_Request_default_instance_;
class RpcMeta_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RpcMeta_Response> _instance;
} _RpcMeta_Response_default_instance_;
class RpcMeta_MetaDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RpcMeta_MetaDataEntry_DoNotUse> _instance;
} _RpcMeta_MetaDataEntry_DoNotUse_default_instance_;
class RpcMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RpcMeta> _instance;
} _RpcMeta_default_instance_;
}  // namespace ijk
static void InitDefaultsscc_info_RpcMeta_rpc_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ijk::_RpcMeta_default_instance_;
    new (ptr) ::ijk::RpcMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ijk::RpcMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RpcMeta_rpc_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RpcMeta_rpc_5fmeta_2eproto}, {
      &scc_info_RpcMeta_Request_rpc_5fmeta_2eproto.base,
      &scc_info_RpcMeta_Response_rpc_5fmeta_2eproto.base,
      &scc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ijk::_RpcMeta_MetaDataEntry_DoNotUse_default_instance_;
    new (ptr) ::ijk::RpcMeta_MetaDataEntry_DoNotUse();
  }
  ::ijk::RpcMeta_MetaDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto}, {}};

static void InitDefaultsscc_info_RpcMeta_Request_rpc_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ijk::_RpcMeta_Request_default_instance_;
    new (ptr) ::ijk::RpcMeta_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ijk::RpcMeta_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_Request_rpc_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RpcMeta_Request_rpc_5fmeta_2eproto}, {}};

static void InitDefaultsscc_info_RpcMeta_Response_rpc_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ijk::_RpcMeta_Response_default_instance_;
    new (ptr) ::ijk::RpcMeta_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ijk::RpcMeta_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RpcMeta_Response_rpc_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RpcMeta_Response_rpc_5fmeta_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_5fmeta_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_5fmeta_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmeta_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, method_id_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, method_name_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, expect_response_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Request, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, failed_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, error_code_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, reason_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_Response, timeout_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_MetaDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_MetaDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_MetaDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta_MetaDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, type_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, service_id_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, request_info_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, response_info_),
  PROTOBUF_FIELD_OFFSET(::ijk::RpcMeta, meta_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ijk::RpcMeta_Request)},
  { 10, -1, sizeof(::ijk::RpcMeta_Response)},
  { 20, 27, sizeof(::ijk::RpcMeta_MetaDataEntry_DoNotUse)},
  { 29, -1, sizeof(::ijk::RpcMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ijk::_RpcMeta_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ijk::_RpcMeta_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ijk::_RpcMeta_MetaDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ijk::_RpcMeta_default_instance_),
};

const char descriptor_table_protodef_rpc_5fmeta_2eproto[] =
  "\n\016rpc_meta.proto\022\003ijk\"\235\004\n\007RpcMeta\022\037\n\004typ"
  "e\030\001 \001(\0162\021.ijk.RpcMeta.Type\022\022\n\nservice_id"
  "\030\002 \001(\r\022*\n\014request_info\030\003 \001(\0132\024.ijk.RpcMe"
  "ta.Request\022,\n\rresponse_info\030\004 \001(\0132\025.ijk."
  "RpcMeta.Response\022-\n\tmeta_data\030\005 \003(\0132\032.ij"
  "k.RpcMeta.MetaDataEntry\032p\n\007Request\022\021\n\tme"
  "thod_id\030\001 \001(\004\022\023\n\013method_name\030\002 \001(\t\022\027\n\017ex"
  "pect_response\030\003 \001(\010\022\023\n\013sequence_id\030\004 \001(\004"
  "\022\017\n\007timeout\030\005 \001(\004\032d\n\010Response\022\023\n\013sequenc"
  "e_id\030\001 \001(\004\022\016\n\006failed\030\002 \001(\010\022\022\n\nerror_code"
  "\030\003 \001(\005\022\016\n\006reason\030\004 \001(\t\022\017\n\007timeout\030\005 \001(\010\032"
  "/\n\rMetaDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"!\n\004Type\022\013\n\007REQUEST\020\000\022\014\n\010RESPONS"
  "E\020\001\"(\n\020DataEncodingType\022\n\n\006BINARY\020\000\022\010\n\004J"
  "SON\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_5fmeta_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_5fmeta_2eproto_sccs[4] = {
  &scc_info_RpcMeta_rpc_5fmeta_2eproto.base,
  &scc_info_RpcMeta_MetaDataEntry_DoNotUse_rpc_5fmeta_2eproto.base,
  &scc_info_RpcMeta_Request_rpc_5fmeta_2eproto.base,
  &scc_info_RpcMeta_Response_rpc_5fmeta_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_5fmeta_2eproto_once;
static bool descriptor_table_rpc_5fmeta_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmeta_2eproto = {
  &descriptor_table_rpc_5fmeta_2eproto_initialized, descriptor_table_protodef_rpc_5fmeta_2eproto, "rpc_meta.proto", 573,
  &descriptor_table_rpc_5fmeta_2eproto_once, descriptor_table_rpc_5fmeta_2eproto_sccs, descriptor_table_rpc_5fmeta_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_rpc_5fmeta_2eproto::offsets,
  file_level_metadata_rpc_5fmeta_2eproto, 4, file_level_enum_descriptors_rpc_5fmeta_2eproto, file_level_service_descriptors_rpc_5fmeta_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_5fmeta_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_5fmeta_2eproto), true);
namespace ijk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMeta_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[0];
}
bool RpcMeta_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RpcMeta_Type RpcMeta::REQUEST;
constexpr RpcMeta_Type RpcMeta::RESPONSE;
constexpr RpcMeta_Type RpcMeta::Type_MIN;
constexpr RpcMeta_Type RpcMeta::Type_MAX;
constexpr int RpcMeta::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMeta_DataEncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[1];
}
bool RpcMeta_DataEncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RpcMeta_DataEncodingType RpcMeta::BINARY;
constexpr RpcMeta_DataEncodingType RpcMeta::JSON;
constexpr RpcMeta_DataEncodingType RpcMeta::DataEncodingType_MIN;
constexpr RpcMeta_DataEncodingType RpcMeta::DataEncodingType_MAX;
constexpr int RpcMeta::DataEncodingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RpcMeta_Request::InitAsDefaultInstance() {
}
class RpcMeta_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta_Request::kMethodIdFieldNumber;
const int RpcMeta_Request::kMethodNameFieldNumber;
const int RpcMeta_Request::kExpectResponseFieldNumber;
const int RpcMeta_Request::kSequenceIdFieldNumber;
const int RpcMeta_Request::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta_Request::RpcMeta_Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ijk.RpcMeta.Request)
}
RpcMeta_Request::RpcMeta_Request(const RpcMeta_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  ::memcpy(&method_id_, &from.method_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expect_response_) -
    reinterpret_cast<char*>(&method_id_)) + sizeof(expect_response_));
  // @@protoc_insertion_point(copy_constructor:ijk.RpcMeta.Request)
}

void RpcMeta_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RpcMeta_Request_rpc_5fmeta_2eproto.base);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expect_response_) -
      reinterpret_cast<char*>(&method_id_)) + sizeof(expect_response_));
}

RpcMeta_Request::~RpcMeta_Request() {
  // @@protoc_insertion_point(destructor:ijk.RpcMeta.Request)
  SharedDtor();
}

void RpcMeta_Request::SharedDtor() {
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RpcMeta_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpcMeta_Request& RpcMeta_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RpcMeta_Request_rpc_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void RpcMeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ijk.RpcMeta.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expect_response_) -
      reinterpret_cast<char*>(&method_id_)) + sizeof(expect_response_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpcMeta_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 method_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_method_name(), ptr, ctx, "ijk.RpcMeta.Request.method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool expect_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expect_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpcMeta_Request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ijk.RpcMeta.Request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 method_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &method_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ijk.RpcMeta.Request.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool expect_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expect_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequence_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timeout = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ijk.RpcMeta.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ijk.RpcMeta.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpcMeta_Request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ijk.RpcMeta.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 method_id = 1;
  if (this->method_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->method_id(), output);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ijk.RpcMeta.Request.method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // bool expect_response = 3;
  if (this->expect_response() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->expect_response(), output);
  }

  // uint64 sequence_id = 4;
  if (this->sequence_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->sequence_id(), output);
  }

  // uint64 timeout = 5;
  if (this->timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ijk.RpcMeta.Request)
}

::PROTOBUF_NAMESPACE_ID::uint8* RpcMeta_Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ijk.RpcMeta.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 method_id = 1;
  if (this->method_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->method_id(), target);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ijk.RpcMeta.Request.method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // bool expect_response = 3;
  if (this->expect_response() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->expect_response(), target);
  }

  // uint64 sequence_id = 4;
  if (this->sequence_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->sequence_id(), target);
  }

  // uint64 timeout = 5;
  if (this->timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ijk.RpcMeta.Request)
  return target;
}

size_t RpcMeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ijk.RpcMeta.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // uint64 method_id = 1;
  if (this->method_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->method_id());
  }

  // uint64 sequence_id = 4;
  if (this->sequence_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }

  // uint64 timeout = 5;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timeout());
  }

  // bool expect_response = 3;
  if (this->expect_response() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcMeta_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ijk.RpcMeta.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RpcMeta_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ijk.RpcMeta.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ijk.RpcMeta.Request)
    MergeFrom(*source);
  }
}

void RpcMeta_Request::MergeFrom(const RpcMeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ijk.RpcMeta.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.method_id() != 0) {
    set_method_id(from.method_id());
  }
  if (from.sequence_id() != 0) {
    set_sequence_id(from.sequence_id());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.expect_response() != 0) {
    set_expect_response(from.expect_response());
  }
}

void RpcMeta_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ijk.RpcMeta.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta_Request::CopyFrom(const RpcMeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ijk.RpcMeta.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta_Request::IsInitialized() const {
  return true;
}

void RpcMeta_Request::Swap(RpcMeta_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta_Request::InternalSwap(RpcMeta_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(method_id_, other->method_id_);
  swap(sequence_id_, other->sequence_id_);
  swap(timeout_, other->timeout_);
  swap(expect_response_, other->expect_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RpcMeta_Response::InitAsDefaultInstance() {
}
class RpcMeta_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta_Response::kSequenceIdFieldNumber;
const int RpcMeta_Response::kFailedFieldNumber;
const int RpcMeta_Response::kErrorCodeFieldNumber;
const int RpcMeta_Response::kReasonFieldNumber;
const int RpcMeta_Response::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta_Response::RpcMeta_Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ijk.RpcMeta.Response)
}
RpcMeta_Response::RpcMeta_Response(const RpcMeta_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&sequence_id_, &from.sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&sequence_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:ijk.RpcMeta.Response)
}

void RpcMeta_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RpcMeta_Response_rpc_5fmeta_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&sequence_id_)) + sizeof(timeout_));
}

RpcMeta_Response::~RpcMeta_Response() {
  // @@protoc_insertion_point(destructor:ijk.RpcMeta.Response)
  SharedDtor();
}

void RpcMeta_Response::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RpcMeta_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpcMeta_Response& RpcMeta_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RpcMeta_Response_rpc_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void RpcMeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ijk.RpcMeta.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&sequence_id_)) + sizeof(timeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpcMeta_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool failed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "ijk.RpcMeta.Response.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpcMeta_Response::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ijk.RpcMeta.Response)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool failed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ijk.RpcMeta.Response.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ijk.RpcMeta.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ijk.RpcMeta.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpcMeta_Response::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ijk.RpcMeta.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence_id = 1;
  if (this->sequence_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sequence_id(), output);
  }

  // bool failed = 2;
  if (this->failed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->failed(), output);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ijk.RpcMeta.Response.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // bool timeout = 5;
  if (this->timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ijk.RpcMeta.Response)
}

::PROTOBUF_NAMESPACE_ID::uint8* RpcMeta_Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ijk.RpcMeta.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence_id = 1;
  if (this->sequence_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_id(), target);
  }

  // bool failed = 2;
  if (this->failed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->failed(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ijk.RpcMeta.Response.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // bool timeout = 5;
  if (this->timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ijk.RpcMeta.Response)
  return target;
}

size_t RpcMeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ijk.RpcMeta.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // uint64 sequence_id = 1;
  if (this->sequence_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // bool failed = 2;
  if (this->failed() != 0) {
    total_size += 1 + 1;
  }

  // bool timeout = 5;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcMeta_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ijk.RpcMeta.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RpcMeta_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ijk.RpcMeta.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ijk.RpcMeta.Response)
    MergeFrom(*source);
  }
}

void RpcMeta_Response::MergeFrom(const RpcMeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ijk.RpcMeta.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.sequence_id() != 0) {
    set_sequence_id(from.sequence_id());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.failed() != 0) {
    set_failed(from.failed());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void RpcMeta_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ijk.RpcMeta.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta_Response::CopyFrom(const RpcMeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ijk.RpcMeta.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta_Response::IsInitialized() const {
  return true;
}

void RpcMeta_Response::Swap(RpcMeta_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta_Response::InternalSwap(RpcMeta_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_id_, other->sequence_id_);
  swap(error_code_, other->error_code_);
  swap(failed_, other->failed_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RpcMeta_MetaDataEntry_DoNotUse::RpcMeta_MetaDataEntry_DoNotUse() {}
RpcMeta_MetaDataEntry_DoNotUse::RpcMeta_MetaDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RpcMeta_MetaDataEntry_DoNotUse::MergeFrom(const RpcMeta_MetaDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta_MetaDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RpcMeta_MetaDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RpcMeta::InitAsDefaultInstance() {
  ::ijk::_RpcMeta_default_instance_._instance.get_mutable()->request_info_ = const_cast< ::ijk::RpcMeta_Request*>(
      ::ijk::RpcMeta_Request::internal_default_instance());
  ::ijk::_RpcMeta_default_instance_._instance.get_mutable()->response_info_ = const_cast< ::ijk::RpcMeta_Response*>(
      ::ijk::RpcMeta_Response::internal_default_instance());
}
class RpcMeta::HasBitSetters {
 public:
  static const ::ijk::RpcMeta_Request& request_info(const RpcMeta* msg);
  static const ::ijk::RpcMeta_Response& response_info(const RpcMeta* msg);
};

const ::ijk::RpcMeta_Request&
RpcMeta::HasBitSetters::request_info(const RpcMeta* msg) {
  return *msg->request_info_;
}
const ::ijk::RpcMeta_Response&
RpcMeta::HasBitSetters::response_info(const RpcMeta* msg) {
  return *msg->response_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kTypeFieldNumber;
const int RpcMeta::kServiceIdFieldNumber;
const int RpcMeta::kRequestInfoFieldNumber;
const int RpcMeta::kResponseInfoFieldNumber;
const int RpcMeta::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ijk.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meta_data_.MergeFrom(from.meta_data_);
  if (from.has_request_info()) {
    request_info_ = new ::ijk::RpcMeta_Request(*from.request_info_);
  } else {
    request_info_ = nullptr;
  }
  if (from.has_response_info()) {
    response_info_ = new ::ijk::RpcMeta_Response(*from.response_info_);
  } else {
    response_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:ijk.RpcMeta)
}

void RpcMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RpcMeta_rpc_5fmeta_2eproto.base);
  ::memset(&request_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&request_info_)) + sizeof(service_id_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:ijk.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  if (this != internal_default_instance()) delete request_info_;
  if (this != internal_default_instance()) delete response_info_;
}

void RpcMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpcMeta& RpcMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RpcMeta_rpc_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:ijk.RpcMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && request_info_ != nullptr) {
    delete request_info_;
  }
  request_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_info_ != nullptr) {
    delete response_info_;
  }
  response_info_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpcMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ijk.RpcMeta.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::ijk::RpcMeta_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 service_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ijk.RpcMeta.Request request_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_request_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ijk.RpcMeta.Response response_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> meta_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&meta_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpcMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ijk.RpcMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ijk.RpcMeta.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ijk::RpcMeta_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 service_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ijk.RpcMeta.Request request_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ijk.RpcMeta.Response response_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> meta_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          RpcMeta_MetaDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RpcMeta_MetaDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&meta_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ijk.RpcMeta.MetaDataEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ijk.RpcMeta.MetaDataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ijk.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ijk.RpcMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpcMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ijk.RpcMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ijk.RpcMeta.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 service_id = 2;
  if (this->service_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  // .ijk.RpcMeta.Request request_info = 3;
  if (this->has_request_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::request_info(this), output);
  }

  // .ijk.RpcMeta.Response response_info = 4;
  if (this->has_response_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::response_info(this), output);
  }

  // map<string, string> meta_data = 5;
  if (!this->meta_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ijk.RpcMeta.MetaDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ijk.RpcMeta.MetaDataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->meta_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->meta_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->meta_data().begin();
          it != this->meta_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RpcMeta_MetaDataEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->meta_data().begin();
          it != this->meta_data().end(); ++it) {
        RpcMeta_MetaDataEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ijk.RpcMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ijk.RpcMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ijk.RpcMeta.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 service_id = 2;
  if (this->service_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  // .ijk.RpcMeta.Request request_info = 3;
  if (this->has_request_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::request_info(this), target);
  }

  // .ijk.RpcMeta.Response response_info = 4;
  if (this->has_response_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::response_info(this), target);
  }

  // map<string, string> meta_data = 5;
  if (!this->meta_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ijk.RpcMeta.MetaDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ijk.RpcMeta.MetaDataEntry.value");
      }
    };

    if (false &&
        this->meta_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->meta_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->meta_data().begin();
          it != this->meta_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RpcMeta_MetaDataEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->meta_data().begin();
          it != this->meta_data().end(); ++it) {
        RpcMeta_MetaDataEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ijk.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ijk.RpcMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> meta_data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->meta_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->meta_data().begin();
      it != this->meta_data().end(); ++it) {
    RpcMeta_MetaDataEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // .ijk.RpcMeta.Request request_info = 3;
  if (this->has_request_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_info_);
  }

  // .ijk.RpcMeta.Response response_info = 4;
  if (this->has_response_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_info_);
  }

  // .ijk.RpcMeta.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 service_id = 2;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->service_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ijk.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RpcMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ijk.RpcMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ijk.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ijk.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_data_.MergeFrom(from.meta_data_);
  if (from.has_request_info()) {
    mutable_request_info()->::ijk::RpcMeta_Request::MergeFrom(from.request_info());
  }
  if (from.has_response_info()) {
    mutable_response_info()->::ijk::RpcMeta_Response::MergeFrom(from.response_info());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
}

void RpcMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ijk.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ijk.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  meta_data_.Swap(&other->meta_data_);
  swap(request_info_, other->request_info_);
  swap(response_info_, other->response_info_);
  swap(type_, other->type_);
  swap(service_id_, other->service_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ijk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ijk::RpcMeta_Request* Arena::CreateMaybeMessage< ::ijk::RpcMeta_Request >(Arena* arena) {
  return Arena::CreateInternal< ::ijk::RpcMeta_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ijk::RpcMeta_Response* Arena::CreateMaybeMessage< ::ijk::RpcMeta_Response >(Arena* arena) {
  return Arena::CreateInternal< ::ijk::RpcMeta_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ijk::RpcMeta_MetaDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::ijk::RpcMeta_MetaDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ijk::RpcMeta_MetaDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ijk::RpcMeta* Arena::CreateMaybeMessage< ::ijk::RpcMeta >(Arena* arena) {
  return Arena::CreateInternal< ::ijk::RpcMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
