// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace xx {
class SNData;
class SNDataDefaultTypeInternal;
extern SNDataDefaultTypeInternal _SNData_default_instance_;
class SNHandshake;
class SNHandshakeDefaultTypeInternal;
extern SNHandshakeDefaultTypeInternal _SNHandshake_default_instance_;
class SNMessage;
class SNMessageDefaultTypeInternal;
extern SNMessageDefaultTypeInternal _SNMessage_default_instance_;
}  // namespace xx
PROTOBUF_NAMESPACE_OPEN
template<> ::xx::SNData* Arena::CreateMaybeMessage<::xx::SNData>(Arena*);
template<> ::xx::SNHandshake* Arena::CreateMaybeMessage<::xx::SNHandshake>(Arena*);
template<> ::xx::SNMessage* Arena::CreateMaybeMessage<::xx::SNMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xx {

enum SNCmd : int {
  SN_CMD_INVALID = 0,
  SN_CMD_HANDSHAKE_SYN = 1,
  SN_CMD_HANDSHAKE_ACK = 2,
  SN_CMD_DATA = 3,
  SNCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SNCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SNCmd_IsValid(int value);
constexpr SNCmd SNCmd_MIN = SN_CMD_INVALID;
constexpr SNCmd SNCmd_MAX = SN_CMD_DATA;
constexpr int SNCmd_ARRAYSIZE = SNCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SNCmd_descriptor();
template<typename T>
inline const std::string& SNCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SNCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SNCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SNCmd_descriptor(), enum_t_value);
}
inline bool SNCmd_Parse(
    const std::string& name, SNCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SNCmd>(
    SNCmd_descriptor(), name, value);
}
// ===================================================================

class SNHandshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xx.SNHandshake) */ {
 public:
  SNHandshake();
  virtual ~SNHandshake();

  SNHandshake(const SNHandshake& from);
  SNHandshake(SNHandshake&& from) noexcept
    : SNHandshake() {
    *this = ::std::move(from);
  }

  inline SNHandshake& operator=(const SNHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNHandshake& operator=(SNHandshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNHandshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNHandshake* internal_default_instance() {
    return reinterpret_cast<const SNHandshake*>(
               &_SNHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SNHandshake* other);
  friend void swap(SNHandshake& a, SNHandshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SNHandshake* New() const final {
    return CreateMaybeMessage<SNHandshake>(nullptr);
  }

  SNHandshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNHandshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNHandshake& from);
  void MergeFrom(const SNHandshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNHandshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xx.SNHandshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 svr_id = 1;
  void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 svr_id() const;
  void set_svr_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xx.SNHandshake)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 svr_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SNData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xx.SNData) */ {
 public:
  SNData();
  virtual ~SNData();

  SNData(const SNData& from);
  SNData(SNData&& from) noexcept
    : SNData() {
    *this = ::std::move(from);
  }

  inline SNData& operator=(const SNData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNData& operator=(SNData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNData* internal_default_instance() {
    return reinterpret_cast<const SNData*>(
               &_SNData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SNData* other);
  friend void swap(SNData& a, SNData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SNData* New() const final {
    return CreateMaybeMessage<SNData>(nullptr);
  }

  SNData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNData& from);
  void MergeFrom(const SNData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xx.SNData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes app_msg_data = 2;
  void clear_app_msg_data();
  static const int kAppMsgDataFieldNumber = 2;
  const std::string& app_msg_data() const;
  void set_app_msg_data(const std::string& value);
  void set_app_msg_data(std::string&& value);
  void set_app_msg_data(const char* value);
  void set_app_msg_data(const void* value, size_t size);
  std::string* mutable_app_msg_data();
  std::string* release_app_msg_data();
  void set_allocated_app_msg_data(std::string* app_msg_data);

  // int32 app_msg_cmd = 1;
  void clear_app_msg_cmd();
  static const int kAppMsgCmdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 app_msg_cmd() const;
  void set_app_msg_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xx.SNData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_msg_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_msg_cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SNMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xx.SNMessage) */ {
 public:
  SNMessage();
  virtual ~SNMessage();

  SNMessage(const SNMessage& from);
  SNMessage(SNMessage&& from) noexcept
    : SNMessage() {
    *this = ::std::move(from);
  }

  inline SNMessage& operator=(const SNMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNMessage& operator=(SNMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNMessage* internal_default_instance() {
    return reinterpret_cast<const SNMessage*>(
               &_SNMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SNMessage* other);
  friend void swap(SNMessage& a, SNMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SNMessage* New() const final {
    return CreateMaybeMessage<SNMessage>(nullptr);
  }

  SNMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNMessage& from);
  void MergeFrom(const SNMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xx.SNMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .xx.SNHandshake handshake = 2;
  bool has_handshake() const;
  void clear_handshake();
  static const int kHandshakeFieldNumber = 2;
  const ::xx::SNHandshake& handshake() const;
  ::xx::SNHandshake* release_handshake();
  ::xx::SNHandshake* mutable_handshake();
  void set_allocated_handshake(::xx::SNHandshake* handshake);

  // .xx.SNData data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::xx::SNData& data() const;
  ::xx::SNData* release_data();
  ::xx::SNData* mutable_data();
  void set_allocated_data(::xx::SNData* data);

  // .xx.SNCmd cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::xx::SNCmd cmd() const;
  void set_cmd(::xx::SNCmd value);

  // @@protoc_insertion_point(class_scope:xx.SNMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::xx::SNHandshake* handshake_;
  ::xx::SNData* data_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SNHandshake

// int32 svr_id = 1;
inline void SNHandshake::clear_svr_id() {
  svr_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNHandshake::svr_id() const {
  // @@protoc_insertion_point(field_get:xx.SNHandshake.svr_id)
  return svr_id_;
}
inline void SNHandshake::set_svr_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  svr_id_ = value;
  // @@protoc_insertion_point(field_set:xx.SNHandshake.svr_id)
}

// -------------------------------------------------------------------

// SNData

// int32 app_msg_cmd = 1;
inline void SNData::clear_app_msg_cmd() {
  app_msg_cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNData::app_msg_cmd() const {
  // @@protoc_insertion_point(field_get:xx.SNData.app_msg_cmd)
  return app_msg_cmd_;
}
inline void SNData::set_app_msg_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_msg_cmd_ = value;
  // @@protoc_insertion_point(field_set:xx.SNData.app_msg_cmd)
}

// bytes app_msg_data = 2;
inline void SNData::clear_app_msg_data() {
  app_msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNData::app_msg_data() const {
  // @@protoc_insertion_point(field_get:xx.SNData.app_msg_data)
  return app_msg_data_.GetNoArena();
}
inline void SNData::set_app_msg_data(const std::string& value) {
  
  app_msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xx.SNData.app_msg_data)
}
inline void SNData::set_app_msg_data(std::string&& value) {
  
  app_msg_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xx.SNData.app_msg_data)
}
inline void SNData::set_app_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xx.SNData.app_msg_data)
}
inline void SNData::set_app_msg_data(const void* value, size_t size) {
  
  app_msg_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xx.SNData.app_msg_data)
}
inline std::string* SNData::mutable_app_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:xx.SNData.app_msg_data)
  return app_msg_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNData::release_app_msg_data() {
  // @@protoc_insertion_point(field_release:xx.SNData.app_msg_data)
  
  return app_msg_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNData::set_allocated_app_msg_data(std::string* app_msg_data) {
  if (app_msg_data != nullptr) {
    
  } else {
    
  }
  app_msg_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_msg_data);
  // @@protoc_insertion_point(field_set_allocated:xx.SNData.app_msg_data)
}

// -------------------------------------------------------------------

// SNMessage

// .xx.SNCmd cmd = 1;
inline void SNMessage::clear_cmd() {
  cmd_ = 0;
}
inline ::xx::SNCmd SNMessage::cmd() const {
  // @@protoc_insertion_point(field_get:xx.SNMessage.cmd)
  return static_cast< ::xx::SNCmd >(cmd_);
}
inline void SNMessage::set_cmd(::xx::SNCmd value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:xx.SNMessage.cmd)
}

// .xx.SNHandshake handshake = 2;
inline bool SNMessage::has_handshake() const {
  return this != internal_default_instance() && handshake_ != nullptr;
}
inline void SNMessage::clear_handshake() {
  if (GetArenaNoVirtual() == nullptr && handshake_ != nullptr) {
    delete handshake_;
  }
  handshake_ = nullptr;
}
inline const ::xx::SNHandshake& SNMessage::handshake() const {
  const ::xx::SNHandshake* p = handshake_;
  // @@protoc_insertion_point(field_get:xx.SNMessage.handshake)
  return p != nullptr ? *p : *reinterpret_cast<const ::xx::SNHandshake*>(
      &::xx::_SNHandshake_default_instance_);
}
inline ::xx::SNHandshake* SNMessage::release_handshake() {
  // @@protoc_insertion_point(field_release:xx.SNMessage.handshake)
  
  ::xx::SNHandshake* temp = handshake_;
  handshake_ = nullptr;
  return temp;
}
inline ::xx::SNHandshake* SNMessage::mutable_handshake() {
  
  if (handshake_ == nullptr) {
    auto* p = CreateMaybeMessage<::xx::SNHandshake>(GetArenaNoVirtual());
    handshake_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xx.SNMessage.handshake)
  return handshake_;
}
inline void SNMessage::set_allocated_handshake(::xx::SNHandshake* handshake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete handshake_;
  }
  if (handshake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      handshake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handshake, submessage_arena);
    }
    
  } else {
    
  }
  handshake_ = handshake;
  // @@protoc_insertion_point(field_set_allocated:xx.SNMessage.handshake)
}

// .xx.SNData data = 3;
inline bool SNMessage::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void SNMessage::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::xx::SNData& SNMessage::data() const {
  const ::xx::SNData* p = data_;
  // @@protoc_insertion_point(field_get:xx.SNMessage.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::xx::SNData*>(
      &::xx::_SNData_default_instance_);
}
inline ::xx::SNData* SNMessage::release_data() {
  // @@protoc_insertion_point(field_release:xx.SNMessage.data)
  
  ::xx::SNData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xx::SNData* SNMessage::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xx::SNData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xx.SNMessage.data)
  return data_;
}
inline void SNMessage::set_allocated_data(::xx::SNData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xx.SNMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xx::SNCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xx::SNCmd>() {
  return ::xx::SNCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
